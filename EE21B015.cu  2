
#include <iostream>
#include <stdio.h>
#include <cuda.h>
#include <chrono>

using namespace std;
//#define int long long
//*******************************************

// Write down the kernels here



__global__ void calc_array(int *dtankHP, int* dcount, int *dscore, int *dnondes ,int H, int T){

    int tid = threadIdx.x;

    dnondes[tid] = 1; 
    dtankHP[tid] = H;
    dscore[tid]=0;
    
    
    if(tid == 0){
        dcount[0]= T;
    }



}


__global__ void battlefield(int *dxcoord,int *dycoord,int *dtankHP, int *dscore, int *dnondes,int round,int* dcount, int T)
{
    int tid = blockIdx.x * blockDim.x + threadIdx.x;
    if (tid >= T)
        return;
    //if (dtankHP[tid] <= 0){ dnondes[tid] = 0;}
    if (dnondes[tid]==1) {

            int firing_x = dxcoord[tid];
            int firing_y = dycoord[tid];
            int target_tank = (tid + round) % T;
            int target_x = dxcoord[target_tank];
            int target_y = dycoord[target_tank];

            int dx = target_x - firing_x;
            int dy = target_y - firing_y;
            //bool horz =false, vert = false;
            int dxd, dyd, yi, xi;
            int mindisx =  INT_MAX;
            int mindisy =  INT_MAX;
	        int nearest = T;
            // if(dy==0){
            //     horz=true;
            // }
            // if(dx == 0){
            //     vert = true;
            // }
            //printf("Target of %d is %d\n",tid,target_tank);
                // if(round>1000){
                //     printf("Tank is %d\n Health is %d\n ",tid,dtankHP[tid]);
                // }
            if (target_tank!=tid){  //same tank ignore


                for(int i=0; i<T; i++) //iterating over all possible tanks except the current tank

                {  
                    yi = dycoord[i];
                    xi = dxcoord[i];

                    dyd = yi-firing_y;
                    dxd = xi-firing_x;

                    if(i!=tid)
                    {
                        if(dnondes[i]==1){

                            long long p1 = dy;
                            p1*=dyd;
                            long long p2 = dx;
                            p2*=dxd;
                            long long p3 = dx;
                            p3*=dyd;
                            long long p4 = dy;
                            p4*=dxd;
                            // if(horz){
                            //     if(dyd==0 && p2>0 && abs(mindisx)>abs(dxd))
                            //     {
                            //         mindisx = dxd;
                            //         mindisy = dyd;
                            //         nearest = i;
                            //     }
                            // }
                            // else if(vert){
                            //     if(dxd==0 && p1>0 && abs(mindisy)>abs(dyd))
                            //     {
                            //         mindisx = dxd;
                            //         mindisy = dyd;
                            //         nearest = i;
                            //     }
                            // }
                            // else{
                            if((p1)>=0 && (p2)>=0 && (p3==p4) && (abs(mindisx) > abs(dxd) || abs(mindisy) > abs(dyd)))
                            {
                                mindisx = dxd;
                                mindisy = dyd;
                                nearest = i;
                            }
                            //}
                        }
                    }
                }
                //printf("Tank %d wants %d\n",tid,nearest);

                if(dnondes[nearest]==1){
                    atomicAdd(&dscore[tid],1);
                    atomicAdd(&dtankHP[nearest],-1);
                    // if(nearest!=target_tank){
                    //     printf(" False shot %d\n",tid);
                    // }
                    //printf("Tank %d shoots %d\n",tid,nearest);
                    //printf("Health and score of %d is %d , %d\n",tid,dtankHP[tid],dscore[tid]);
                }

                __syncthreads();

                if(dtankHP[tid]<=0 && dnondes[tid] == 1) {
                    atomicAdd(&dcount[0], -1); 
                    dnondes[tid] = 0;
                    //printf("Tank %d died\n",tid);
                }
                //__syncthreads();


        }

    }

}
    
    

//***********************************************


int main(int argc,char **argv)
{
    // Variable declarations
    int M,N,T,H,*xcoord,*ycoord,*score;
    

    FILE *inputfilepointer;
    
    //File Opening for read
    char *inputfilename = argv[1];
    inputfilepointer    = fopen( inputfilename , "r");

    if ( inputfilepointer == NULL )  {
        printf( "input.txt file failed to open." );
        return 0; 
    }

    fscanf( inputfilepointer, "%d", &M );
    fscanf( inputfilepointer, "%d", &N );
    fscanf( inputfilepointer, "%d", &T ); // T is number of Tanks
    fscanf( inputfilepointer, "%d", &H ); // H is the starting Health point of each Tank
	
    // Allocate memory on CPU
    xcoord=(int*)malloc(T * sizeof (int));  // X coordinate of each tank
    ycoord=(int*)malloc(T * sizeof (int));  // Y coordinate of each tank
    score=(int*)malloc(T * sizeof (int));  // Score of each tank (ensure that at the end you have copied back the score calculations on the GPU back to this allocation)

    // Get the Input of Tank coordinates
    for(int i=0;i<T;i++)
    {
      fscanf( inputfilepointer, "%d", &xcoord[i] );
      fscanf( inputfilepointer, "%d", &ycoord[i] );
    }
		

    auto start = chrono::high_resolution_clock::now();

    //*********************************
    // Your Code begins here (Do not change anything in main() above this comment)
    //********************************


//GPU memory allocation

    int *dxcoord, *dycoord, *dtankHP, *dscore, *dnondes, *dcount;
    int round = 1;
    int count[1] = {T};
    int *tankHP, *nondes;
    tankHP=(int*)malloc(T * sizeof (int)); 
    nondes=(int*)malloc(T * sizeof (int));
    score=(int*)malloc(T * sizeof (int));


    cudaMalloc((void **)&dxcoord, T * sizeof(int));
    cudaMalloc((void **)&dycoord, T * sizeof(int));
    cudaMalloc((void **)&dtankHP, T * sizeof(int));
    cudaMalloc((void **)&dscore, T * sizeof(int));
    cudaMalloc((void **)&dnondes, T * sizeof(int));
    cudaMalloc((void **)&dcount, sizeof(int));

    cudaMemcpy(dxcoord, xcoord, T * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(dycoord, ycoord, T * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(dtankHP, tankHP, T * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(dscore, score, T * sizeof(int),cudaMemcpyHostToDevice);
    cudaMemcpy(dnondes, nondes, T * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(dcount, count, sizeof(int), cudaMemcpyHostToDevice);


    calc_array<<<1,T>>>(dtankHP,dcount, dscore, dnondes,H,T);
    cudaDeviceSynchronize();

 
    cudaMemcpy(count, dcount, sizeof(int), cudaMemcpyDeviceToHost);




    while(count[0]>=2)
    
    {
        battlefield<<<(T-1)/1024 +1 , 1024>>>(dxcoord, dycoord, dtankHP, dscore, dnondes,round,dcount,T);  // T threads per block change it for 1024 threads
        cudaDeviceSynchronize();
        cudaMemcpy(&count, dcount, sizeof(int), cudaMemcpyDeviceToHost);
        //printf("Round is %d ,  count is %d\n",round, count[0]);
        round++;

    }

    cudaMemcpy(score, dscore, T * sizeof(int), cudaMemcpyDeviceToHost);

    cudaFree(dnondes);
    cudaFree(dxcoord);
    cudaFree(dycoord);
    cudaFree(dscore);
    cudaFree(dcount);
    cudaFree(dtankHP);
    free(nondes);
    free(tankHP);
 

    //*********************************
    // Your Code ends here (Do not change anything in main() below this comment)
    //********************************

    auto end  = chrono::high_resolution_clock::now();

    chrono::duration<double, std::micro> timeTaken = end-start;

    printf("Execution time : %f\n", timeTaken.count());

    // Output
    char *outputfilename = argv[2];
    char *exectimefilename = argv[3]; 
    FILE *outputfilepointer;
    outputfilepointer = fopen(outputfilename,"w");

    for(int i=0;i<T;i++)
    {
        fprintf( outputfilepointer, "%d\n", score[i]);
    }
    fclose(inputfilepointer);
    fclose(outputfilepointer);

    outputfilepointer = fopen(exectimefilename,"w");
    fprintf(outputfilepointer,"%f", timeTaken.count());
    fclose(outputfilepointer);

    free(xcoord);
    free(ycoord);
    free(score);
    cudaDeviceSynchronize();
    return 0;
}
